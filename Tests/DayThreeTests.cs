using FluentAssertions;
using Tasks.DayThree;

namespace Tests
{
    public class DayThreeTests
    {
        [Fact]
        public void CalculatesCorrectSnapshotOne()
        {
            // Arrange
            var mapSnapshot = new string[]
            {
                "...................15....904...........850.................329...................13....................................871....816....697....",
                "...........53.497........................%....906...610.......*.............735#..&...*......558...68...............68..*......&....*.......",
                "..........*....$....................132.........*..........844....875................350............*...............*..336.364...649........"
            };

            // Act
            var sum = GearRatios.CalculateSum(mapSnapshot);

            // Assert
            sum.Should().Be(8082);
        }

        [Fact]
        public void CalculatesCorrectSnapshotTwo()
        {
            // Arrange
            var mapSnapshot = new string[]
            {
                "...@............924.*........................245............-.&..........*...606................*...........461............604....#....*....",
                "....................73....160..406.150...............933.957...................%.......419.........665..*.........-.......*.....721..573....",
                "....*915.........40................*...%.............*........584.......929......377....*..404.935....&..870.....93........395.............."
            };

            // Act
            var sum = GearRatios.CalculateSum(mapSnapshot);

            // Assert
            sum.Should().Be(7974);
        }

        [Fact]
        public void CalculatesCorrectSnapshotThree()
        {
            // Arrange
            var mapSnapshot = new string[]
            {
                "...................................&........466*.....@..................*827....530.............................129.628.....923.........=866",
                "..........&......&.............824.573.................669.........................$.....374..627...........698.....................759.....",
                ".......499....%.812.857*653...................668..........879.......974................../......*926...852.........................-....832",
                "...646......284..............708...369...........*808................-.......705.......@...............%.............492.462............*..."
            };

            // Act
            var sum = GearRatios.CalculateSum(mapSnapshot);

            // Assert
            sum.Should().Be(13187);
        }

        [Theory]
        [InlineData(0, "*....")]
        [InlineData(0, ".*...")]
        [InlineData(0, "..*..")]
        [InlineData(0, "...*.")]
        [InlineData(0, "....*")]

        [InlineData(1, "*111.")]
        [InlineData(1, ".111*")]

        [InlineData(2, "*....")]
        [InlineData(2, ".*...")]
        [InlineData(2, "..*..")]
        [InlineData(2, "...*.")]
        [InlineData(2, "....*")]
        public void CalculatesWithCorrectSurrounding(int x, string part)
        {
            // Arrange
            var mapSnapshot = new[]
            {
                ".....",
                ".111.",
                "....."
            };

            mapSnapshot[x] = part;

            // Act
            var sum = GearRatios.CalculateSum(mapSnapshot);

            // Assert
            sum.Should().Be(111);
        }

        [Fact]
        public void CalculatesCorrectRatioSnapshotOne()
        {
            // Arrange
            var mapSnapshot = new string[]
            {
                "...................15....904...........850.................329...................13....................................871....816....697....",
                "...........53.497........................%....906...610.......*.............735#..&...*......558...68...............68..*......&....*.......",
                "..........*....$....................132.........*..........844....875................350............*...............*..336.364...649........"
            };

            // Act
            var sum = GearRatios.CalculateRatioSum(mapSnapshot);

            // Assert
            sum.Should().Be(1022685);
        }
    }
}
